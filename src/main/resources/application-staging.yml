spring:
  application:
    name: workspace-server
  datasource:
    url: jdbc:mysql://platform-qa-db.cxb5wiohfeko.ap-northeast-2.rds.amazonaws.com:8204/workspaces
    username: virnect-workspaces
    password: virnect1234
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    properties:
      hibnerate:
        format_sql: true
      org:
        hibernate:
          envers:
            audit_table_suffix: _history
  redis:
    port: 6379
    database: 0
    host: virnect-qa-redis.b84gc2.0001.apn2.cache.amazonaws.com
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 40MB

logging:
  level:
    org.hibernate.type.descriptor.sql: trace
    com.virnect.workspace.application.*: DEBUG

## Server Configuration
server:
  port: 8082

## Project Configuration
file:
  upload-path: "workspace/profile/"
  url: "https://virnect-platform-qa.s3.ap-northeast-2.amazonaws.com/"
  allow-extension: "gif,jpg,jpeg,png"

## Eureka Server Configuration
eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://stgeureka.virnect.com/eureka

## AWS Storage
cloud:
  aws:
    credentials:
      access-key: AKIAIYFYOR4X6LM3YKSQ
      secret-key: 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
    region:
      auto: true
    s3:
      bucket:
        name: "virnect-platform-qa"
        resource: "workspace/profile"

## Mail send rediect Url
serverUrl: "https://stgapi.virnect.com"
redirectUrl: "https://stgworkstation.virnect.com"
contactUrl: "https://stgwww.virnect.com/contact/inquiry"

## Feign
feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 1000
        readTimeout: 1000
hystrix:
  command:
    "UserRestService":
      execution.isolation.thread.timeoutInMilliseconds: 1000
      metrics.rollingStats.timeInMilliseconds: 60000
      circuitBreaker.requestVolumeThreshold: 5
      circuitBreaker.errorThresholdPercentage: 50
    "ProcessRestService":
      execution.isolation.thread.timeoutInMilliseconds: 1000
      metrics.rollingStats.timeInMilliseconds: 60000
      circuitBreaker.requestVolumeThreshold: 5
      circuitBreaker.errorThresholdPercentage: 50
    "LicenseRestService":
      execution.isolation.thread.timeoutInMilliseconds: 1000
      metrics.rollingStats.timeInMilliseconds: 60000
      circuitBreaker.requestVolumeThreshold: 5
      circuitBreaker.errorThresholdPercentage: 50
    "MessageRestService":
      execution.isolation.thread.timeoutInMilliseconds: 1000
      metrics.rollingStats.timeInMilliseconds: 60000
      circuitBreaker.requestVolumeThreshold: 5
      circuitBreaker.errorThresholdPercentage: 50
