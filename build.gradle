import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    id 'org.springframework.boot' version '2.3.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    id "com.github.jk1.dependency-license-report" version "1.13"
    id 'java'
    id 'jacoco'
}


ext {
    set('springCloudVersion', 'Hoxton.SR10')
    set('mapstructVersion', '1.4.2.Final')
    jacocoExcludes = [

    ]
}

group = 'com.virnect'
version = '1.0.0'
sourceCompatibility = '1.8'

springBoot {
    buildInfo()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.data:spring-data-envers'

    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-config-client'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // ModelMapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.0'


    // Query DSL
    implementation("com.querydsl:querydsl-jpa") // querydsl
    implementation("com.querydsl:querydsl-apt") // querydsl

    // Common
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation 'com.google.code.gson:gson:2.8.5'


    // Apache Common Lang
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // AWS
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.415' // AWS Storage Service
    implementation 'com.amazonaws:aws-java-sdk-ses:1.11.415' // AWS Simple Email Service

    //Swagger Libraries
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'


    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // feign oktthp
    implementation 'io.github.openfeign:feign-okhttp'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
    // Minio
    implementation 'io.minio:minio:7.1.4'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // map struct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

test {
    useJUnitPlatform()
    systemProperty("spring.active.profiles", "test")
    systemProperty("VIRNECT_ENV", "test")
    finalizedBy jacocoTestReport
}

// querydsl 적용
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}


compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}


//License Reporting Configuration
licenseReport {
    renderers = [new InventoryMarkdownReportRenderer()]
    filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}

/**
 * Jacoco Configuration
 */

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test

    reports {
        csv.enabled true
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }
}


bootJar {
    layered()
}